/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiApplicationDetailsIdGet$Json } from '../fn/application/api-application-details-id-get-json';
import { ApiApplicationDetailsIdGet$Json$Params } from '../fn/application/api-application-details-id-get-json';
import { apiApplicationDetailsIdGet$Plain } from '../fn/application/api-application-details-id-get-plain';
import { ApiApplicationDetailsIdGet$Plain$Params } from '../fn/application/api-application-details-id-get-plain';
import { ApplicationDto } from '../models/application-dto';

@Injectable({ providedIn: 'root' })
export class ApplicationService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiApplicationDetailsIdGet()` */
  static readonly ApiApplicationDetailsIdGetPath = '/api/Application/Details/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiApplicationDetailsIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiApplicationDetailsIdGet$Plain$Response(params: ApiApplicationDetailsIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ApplicationDto>> {
    return apiApplicationDetailsIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiApplicationDetailsIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiApplicationDetailsIdGet$Plain(params: ApiApplicationDetailsIdGet$Plain$Params, context?: HttpContext): Observable<ApplicationDto> {
    return this.apiApplicationDetailsIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApplicationDto>): ApplicationDto => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiApplicationDetailsIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiApplicationDetailsIdGet$Json$Response(params: ApiApplicationDetailsIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ApplicationDto>> {
    return apiApplicationDetailsIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiApplicationDetailsIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiApplicationDetailsIdGet$Json(params: ApiApplicationDetailsIdGet$Json$Params, context?: HttpContext): Observable<ApplicationDto> {
    return this.apiApplicationDetailsIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApplicationDto>): ApplicationDto => r.body)
    );
  }

}
